@startuml repository-pattern

package Optsol.Compoentes.Repository {
    
    package Domain {
        interface IEquatable<IEntity<TKey>>
        interface IDisposable
        package Entities {
            interface IEntity<TKey> {
                <<readonly>>
                + Id: TKey
                <<readonly>>
                + CreateDate: DateTime
            }

            interface IAggregateRoot<TKey>

            interface IDeletable {
                <<readonly>>
                + isDeleted: bool
                <<readonly>>
                + DeletedDate: DateTime
                + Delete(): void
            }

            abstract Entity<TKey> implements IEntity
            class EntityGuid extends Entity implements IDeletable

            abstract AggregateRoot<TKey> implements IAggregateRoot
            class AggregateRootGuid extends AggregateRoot implements IDeletable

            abstract ValueObject {
                + {static} EqualOperator(left: ValueObject, right: ValueObject): bool
                + {static} NotEqualOperator(left: ValueObject, right: ValueObject): bool
                + {abstract} GetEqualityComponents(): IEnumerable<object>
                + ^ Equals(): bool
                + ^ GetHashCode(): int
            }
        }
        package Repositories {
            interface IReadRepository<? TEntity extends IAggregateRoot, ? TKey> {
                + GetByIdAsync(id: TKey): Task<TEntity>
                + GetByIdsAsync(ids: IEnumerable<TKey>): Task<IEnumerable<TEntity>>
                + GetAllAsync(): Task<IEnumerable<TEntity>>
                + GetWithRawSqlAsync(query: string, parameters: object[]): Task<IEnumerable<TEntity>>
                + GetWithExpressionAsync(filter: Expression<Func<TEntity, bool>>): Task<IEnumerable<TEntity>>
            }

            interface IWriteRepository<? TEntity extends IAggregateRoot, TKey> {
                + InsertAsync(entity: TEntity): Task
                + UpdateEntity(entity: TEntity): Task
                + DeleteAsync(entity: TEntity): Task
                + SaveChangesAsync(): Task<int>
            }

            interface IRepository<? TEntity extends IAggregateRoot, TKey>
        }

        IEquatable <|.. IEntity
        IEntity <|-- IAggregateRoot

        IAggregateRoot -* IReadRepository
        IAggregateRoot -* IWriteRepository
        IAggregateRoot -* IRepository

        IReadRepository <|-- IRepository
        IWriteRepository <|-- IRepository

        IRepository ..|> IDisposable
    }

    package Infra.EF {
            interface IEntityTypeConfiguration<TEntity>

            class DbContext
            class Context 
            
            class Repository<? TEntity extends IAggregateRoot, TKey> {
                DbContext: Context
                DbSet: DbSet<TEntity>
            }

            class EntityConfigurationBase<TEntity, TKey>

            IEntity -* IEntityTypeConfiguration

            IEntityTypeConfiguration <.. EntityConfigurationBase

            IRepository <-- Repository
            DbContext <|-- Context

            Context -* Repository
            IAggregateRoot -* Repository
    }
}

@enduml